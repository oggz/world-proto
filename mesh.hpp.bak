#ifndef MESH_HPP_INCLUDED
#define MESH_HPP_INCLUDED

#include "superheader.hpp"

class Mesh {
  struct Vertex {
    glm::vec3 position;
    glm::vec3 normal;
    glm::vec2 uv;
    Vertex( glm::vec3 pos, glm::vec3 norm, glm::vec2 tex ) : 
      position( pos ), normal( norm ), uv( tex ) {}
  };

  vector<Vertex> mesh;
  GLuint program, vao, vbo;
  GLuint M;
  vector<GLuint> texture_ids;
  glm::mat4 model_mat, rotation_mat, 
    translation_mat, scale_mat;

public:
  Mesh() {}
  ~Mesh() {
    glDeleteBuffers( 1, &vao );
    glDeleteBuffers( 1, &vbo );
  }

  void LoadTexture( const char* FileName ) { 
    texture_ids.push_back( ReadTexture( FileName ) ); 
  }

  void LoadMesh( const char* FileName, Shader* pShader ) {
    bool result = ReadOBJ( FileName, mesh );
    if ( result != 1 ) { printf( "ERROR: failed to load OBJ file. \n" ); }

    glGenBuffers( 1, &vbo );
    glBindBuffer( GL_ARRAY_BUFFER, vbo );
    glBufferData( GL_ARRAY_BUFFER, mesh.size() * sizeof( Vertex ), &mesh[0], GL_STATIC_DRAW );
    glGenVertexArrays( 1, &vao );
    glBindVertexArray( vao );
    glEnableVertexAttribArray( 0 );
    glVertexAttribPointer( 0, 3, GL_FLOAT, GL_FALSE, sizeof( Vertex ), (void*)0 );
    glEnableVertexAttribArray( 1 );
    glVertexAttribPointer( 1, 3, GL_FLOAT, GL_FALSE, sizeof( Vertex ), (void*)12 );
    glEnableVertexAttribArray( 2 );
    glVertexAttribPointer( 2, 2, GL_FLOAT, GL_FALSE, sizeof( Vertex ), (void*)24 );
    glBindVertexArray( 0 );
    glBindBuffer( GL_ARRAY_BUFFER, 0 );
    glDisableVertexAttribArray( 0 );
    glDisableVertexAttribArray( 1 );
    glDisableVertexAttribArray( 2 );

    program = pShader->program;
    M = pShader->M;
    scale_mat = glm::mat4( 1.0 );
    rotation_mat = glm::mat4( 1.0 );
    translation_mat = glm::mat4( 1.0f ); // glm::translate( x, y, z );
    model_mat = glm::mat4( 1.0 );
  }

  void Render() {
    model_mat = translation_mat * rotation_mat * scale_mat;

    for ( unsigned i = 0; i < texture_ids.size(); i++ ) {
      glActiveTexture( GL_TEXTURE0 + i );
      glBindTexture( GL_TEXTURE_2D, texture_ids[i] );
    }

    glUseProgram( program );
    glUniformMatrix4fv( M, 1, GL_FALSE, &model_mat[0][0] );
    glBindVertexArray( vao );
    glDrawArrays( GL_TRIANGLES, 0, mesh.size() );
    glBindVertexArray( 0 );
    glUseProgram( 0 );

    rotation_mat = glm::rotate( rotation_mat, 1.0f, glm::vec3( 0.0f, 1.0f, 0.0f ) );
  }

  GLuint ReadTexture( const char* FileName ) {
    GLuint texture_id;
    glGenTextures( 1, &texture_id );
    glBindTexture( GL_TEXTURE_2D, texture_id );
    glfwLoadTexture2D( FileName, 0 );

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); 
    glGenerateMipmap(GL_TEXTURE_2D);

    return texture_id;
  }

  bool ReadOBJ( const char * path, std::vector<Vertex> & out_data ) {
    printf("INFO: Loading OBJ file %s...\n", path);

    std::vector<unsigned int> vertexIndices, uvIndices, normalIndices;
    std::vector<glm::vec3> temp_vertices; 
    std::vector<glm::vec2> temp_uvs;
    std::vector<glm::vec3> temp_normals;


    FILE * file = fopen(path, "r");
    if( file == NULL ){
      printf("Impossible to open the file ! Are you in the right path ? See Tutorial 1 for details\n");
      return false;
    }

    while( 1 ){

      char lineHeader[128];
      // read the first word of the line
      int res = fscanf(file, "%s", lineHeader);
      if (res == EOF)
	break; // EOF = End Of File. Quit the loop.

      // else : parse lineHeader
		
      if ( strcmp( lineHeader, "v" ) == 0 ){
	glm::vec3 vertex;
	fscanf(file, "%f %f %f\n", &vertex.x, &vertex.y, &vertex.z );
	temp_vertices.push_back(vertex);
      }else if ( strcmp( lineHeader, "vt" ) == 0 ){
	glm::vec2 uv;
	fscanf(file, "%f %f\n", &uv.x, &uv.y );
	uv.y = -uv.y; // Invert V coordinate since we will only use DDS texture, which are inverted. 
	// Remove if you want to use TGA or BMP loaders.
	temp_uvs.push_back(uv);
      }else if ( strcmp( lineHeader, "vn" ) == 0 ){
	glm::vec3 normal;
	fscanf(file, "%f %f %f\n", &normal.x, &normal.y, &normal.z );
	temp_normals.push_back(normal);
      }else if ( strcmp( lineHeader, "f" ) == 0 ){
	std::string vertex1, vertex2, vertex3;
	unsigned int vertexIndex[3], uvIndex[3], normalIndex[3];
	int matches = fscanf(file, "%d/%d/%d %d/%d/%d %d/%d/%d\n", 
			     &vertexIndex[0], &uvIndex[0], &normalIndex[0], 
			     &vertexIndex[1], &uvIndex[1], &normalIndex[1], 
			     &vertexIndex[2], &uvIndex[2], &normalIndex[2] 
			     );
	if (matches != 9){
	  printf("File can't be read by our simple parser :-( Try exporting with other options\n");
	  return false;
	}
	vertexIndices.push_back(vertexIndex[0]);
	vertexIndices.push_back(vertexIndex[1]);
	vertexIndices.push_back(vertexIndex[2]);
	uvIndices    .push_back(uvIndex[0]);
	uvIndices    .push_back(uvIndex[1]);
	uvIndices    .push_back(uvIndex[2]);
	normalIndices.push_back(normalIndex[0]);
	normalIndices.push_back(normalIndex[1]);
	normalIndices.push_back(normalIndex[2]);
      }else{
	// Probably a comment, eat up the rest of the line
	char stupidBuffer[1000];
	fgets(stupidBuffer, 1000, file);
      }
    }

    // For each vertex of each triangle
    for( unsigned int i=0; i<vertexIndices.size(); i++ ){

      // Get the indices of its attributes
      unsigned int vertexIndex = vertexIndices[i];
      unsigned int uvIndex = uvIndices[i];
      unsigned int normalIndex = normalIndices[i];
		
      // Get the attributes thanks to the index
      glm::vec3 vertex = temp_vertices[ vertexIndex-1 ];
      glm::vec2 uv = temp_uvs[ uvIndex-1 ];
      glm::vec3 normal = temp_normals[ normalIndex-1 ];
		
      // Put the attributes in buffers
      // out_vertices.push_back(vertex);
      // out_uvs     .push_back(uv);
      // out_normals .push_back(normal);
      out_data.push_back( Vertex( vertex, normal, uv ) );
    }

    return true;
  }

};

#endif
